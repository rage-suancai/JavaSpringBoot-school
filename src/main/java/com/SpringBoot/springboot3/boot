整合Web相关框架
我们来看一下 既然我们前面提到SpringBoot会内嵌一个Tomcat服务器 也就是说我们的Jar打包后 相当于就是一个可以直接运行的应用程序 我们来看一下如何创建一个SpringBootWeb项目

这里我们演示使用IDEA来创建一个基于SpringBootWeb应用程序

它是真的快
创建完成后 直接开启项目 我们就可以直接访问:http//localhost:3306/ 我们可以看到 但是由于我们没有编写如何的请求映射 所以没有数据 我们可以来看看日志:
                2022-08-03 10:40:48.275  INFO 4292 --- [           main] c.S.s.JavaSpringBootWebApplication       : Starting JavaSpringBootWebApplication using Java 14.0.2 on Rick-yxs with PID 4292 (D:\back-end learning\java-exercise\javaSpringBoot-yxs\javaSpringBoot-Web\target\classes started by AKAtravis-yxs in D:\back-end learning\java-exercise\javaSpringBoot-yxs\javaSpringBoot-Web)
                2022-08-03 10:40:48.277  INFO 4292 --- [           main] c.S.s.JavaSpringBootWebApplication       : No active profile set, falling back to 1 default profile: "default"
                2022-08-03 10:40:48.792  INFO 4292 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
                2022-08-03 10:40:48.797  INFO 4292 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
                2022-08-03 10:40:48.798  INFO 4292 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.65]
                2022-08-03 10:40:48.853  INFO 4292 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
                2022-08-03 10:40:48.853  INFO 4292 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 548 ms
                2022-08-03 10:40:49.049  INFO 4292 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
                2022-08-03 10:40:49.057  INFO 4292 --- [           main] c.S.s.JavaSpringBootWebApplication       : Started JavaSpringBootWebApplication in 1.072 seconds (JVM running for 1.616)
                2022-08-03 10:47:01.186  INFO 4292 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
                2022-08-03 10:47:01.186  INFO 4292 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
                2022-08-03 10:47:01.186  INFO 4292 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms

我们可以看到 日志中除了最基本的SpringBoot启动日志以外 还新增了内嵌Web服务器(Tomcat)的启动日志 并且显示了当前Web服务器所开放的端口 并且自动帮助我们初始化了DispatcherServlet
但是我们只是创建了项目 导入了Web相关的starter依赖没有进行任何的配置 实际上它使用的是starter提供的默认配置进行初始化的

由于SpringBoot是自动扫描的 因此我们直接创建一个Controller即可被加载:
                @Controller
                public class MainController {

                    @RequestMapping("/index")
                    @ResponseBody
                    public String test(){
                        return "欢迎访问第一个SpringBoot项目";
                    }

                }

我们几乎没有做任何配置 但是可以直接开始配置Controller SpringBoot创建一个Web项目的速度就是这么快

它还可以自动识别类型 如果我们返回的是一个对象类型的数据 那么它会自动转换为JSON数据格式 无需配置:
                @Data
                @Component
                public class Student {
                    int sid;
                    String name;
                    String sex;
                }

                @Controller
                public class MainController {
                    @Resource
                    Student student;

                    @RequestMapping("/index")
                    @ResponseBody
                    public Student test(){
                        student.setSid(8);
                        student.setName("我是个傻逼! ");
                        student.setSex("男");
                        return student;
                    }

                }

最后浏览器能够直接得到application/json的响应数据 就是这么方便
